{"componentChunkName":"component---src-templates-blog-post-js","path":"/upstash/","result":{"data":{"site":{"siteMetadata":{"title":"Menelaos Kotsollaris","author":"Menelaos Kotsollaris"}},"markdownRemark":{"id":"079f1616-3a8a-57dc-9c62-37482829dfc5","excerpt":"Building a Drift Detection Engine with Upstash “This article was featured in the Upstash Website” In this article, we will go through the steps of building a…","html":"<h1>Building a Drift Detection Engine with Upstash</h1>\n<blockquote>\n<p>“This article was featured in the <a href=\"https://upstash.com/blog/drift-detection\">Upstash Website</a>”</p>\n</blockquote>\n<p>In this article, we will go through the steps of building a basic <a href=\"https://snyk.io/blog/infrastructure-drift-detection-mitigation/#:~:text=What%20is%20infrastructure%20drift%3F,can%20happen%20for%20many%20reasons.\">drift</a> detection engine, utilizing the power of Upstash for our <em>online remote</em> state, and building the necessary functions (in TypeScript) for managing the local state computation. Let’s get started!</p>\n<h2>Introduction</h2>\n<p>One challenge when managing infrastructure as code is drift. Drift Management has been a hot topic in the Infrastructure As Code (IAC) area ever since IAC arose in popularity. While IAC frameworks provide the ability to initialize infrastructure, their state is always dynamic and can change from the original declarations.</p>\n<p>Note that while “Drift Management” is commonly applied to the IAC domain, there has been a rise in such applications in many areas. For instance, <a href=\"https://turbo.build/repo\">Vercel’s TurboRepo Engine</a> surely includes such an approach to validate and invalidate artifacts that are no longer “useful” or are no longer active.</p>\n<p>In this article, we will build a drift management engine using TypeScript. Let’s get started!</p>\n<h2>User Acceptance Criteria:</h2>\n<ul>\n<li>Persisting state remotely</li>\n<li>Compute the difference local vs remote state</li>\n<li>Resolve discrepancies in either remote or local</li>\n</ul>\n<h2>Persisting state remotely with Upstash</h2>\n<p>One tremendous benefit of Upstash is the ease of getting started and effectively having both a redis database and an HTTP API URLs. This is essential, as could create local functions that persist state and follow the redis protocol, imitating a CRUD API:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAllRemoteState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getAllRemoteKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> enabledResources<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>acc<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> currKey<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> accum <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/get/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currKey<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        accum<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> accum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> enabledResources<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Persisting state locally</h2>\n<p>For this use case, we will use local <code class=\"language-text\">json</code> blobs. Each <code class=\"language-text\">json</code> can store its metadata, and the filename will be its primary key:</p>\n<p><code class=\"language-text\">example.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"this is an example\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"expires\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"March 2023\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This resource was given <code class=\"language-text\">name</code>, <code class=\"language-text\">description</code> and expiry date. Providing an expiry date would be a very useful attribute as in the future we could determine autonomous-depreciation policies based on resource under-utilizations. For instance, if this resource fails our expected usage, it could be flagged and hence removed from the system.</p>\n<p>At a later stage, our files will start looking like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">resources\n-- data1.json\n-- data2.json\n-- <span class=\"token punctuation\">..</span>.</code></pre></div>\n<h2>Drifting local versus remote</h2>\n<p>We have set up both local and remote states, and now we are ready to start drifting state. Our drifting formula is something along these lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">DRIFT <span class=\"token operator\">=</span> ABS<span class=\"token punctuation\">(</span>REMOTE-LOCAL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span></code></pre></div>\n<p><code class=\"language-text\">DRIFT</code> should be equal to 0 every single time. There are 2 possible cases other than <code class=\"language-text\">DRIFT=0</code> case:</p>\n<ul>\n<li>case A: <code class=\"language-text\">remote</code> contains more resources than <code class=\"language-text\">local</code></li>\n<li>case B: <code class=\"language-text\">local</code> contains more resources than <code class=\"language-text\">remote</code></li>\n</ul>\n<p>Let’s see what to do in any of these cases:</p>\n<h3>CASE 1: <code class=\"language-text\">remote</code> contains more resources than <code class=\"language-text\">local</code> due to out-of-sync <code class=\"language-text\">git</code></h3>\n<p>This can usually happen when a developer is working on a branch and hasn’t pulled the latest changes from the trunk. While the trunk has been updated with the latest resources, the local branch hasn’t pulled all the recent changes, resulting in discrepancies with the local state. A way to visualize this:</p>\n<p><code class=\"language-text\"># Branch | Checksum | Resource #</code></p>\n<div class=\"gatsby-highlight\" data-language=\"git[current resources]=6\"><pre class=\"language-git[current resources]=6\"><code class=\"language-git[current resources]=6\">* 040cc7c     [CURRENT RESOURCES]=6\n| * d9e8b5e   [CURRENT RESOURCES]=6\n| * 5b98a10   [CURRENT RESOURCES]=6\n|/            [CURRENT RESOURCES]=5\n|             [CURRENT RESOURCES]=5</code></pre></div>\n<p>In this case, we don’t modify the remote state as it’s updated. The local state should remain as-is until the latest commit is pulled from the trunk.</p>\n<h3>CASE 2: <code class=\"language-text\">remote</code> contains more resources than <code class=\"language-text\">local</code> due to resource removal</h3>\n<p>Say our <code class=\"language-text\">git</code> branches are in sync, but we find that there are more <code class=\"language-text\">resources</code> available remotely than locally. That’s an indication of a resource removal that has occurred locally. in this scenario, we want to remove the resource from the remote so that we sync it with the local state. Here’s how we can do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> computeToBeDeleted<span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>directoryPath<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> localResources <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getLocalResources</span><span class=\"token punctuation\">(</span>directoryPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> remoteResources <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getAllRemoteResourceKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> remoteResources<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>localResources<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function will compute the resources that need to be deleted from the remote state. Note that it will return an array, which we later need to iterate to send a request to <code class=\"language-text\">upstash</code> redis server, removing all the keys from the redis DB.</p>\n<h2>The terraform drift management approach</h2>\n<p>When it comes to managing drift, few compare to the power of terraform. There have been detailed blogs, like <a href=\"https://www.hashicorp.com/blog/detecting-and-managing-drift-with-terraform\">this one</a>, on how terraform manages drift, and it’s worth looking into the terraform model. A few key-takeaways:</p>\n<ol>\n<li><strong><code class=\"language-text\">terraform state</code></strong> is similar to the “local” state of our example</li>\n<li><strong><code class=\"language-text\">terraform refresh/plan/config</code></strong> are commands that calculate state on demand.</li>\n<li><strong><code class=\"language-text\">terraform apply</code></strong> executes the configured resources, after alerting of possible add/deletion of resources.</li>\n</ol>\n<p>In our example, we attached the <code class=\"language-text\">apply</code> mechanism directly when a commit is merged on the trunk. While this is straightforward, there might be cases where treating the trunk as “pristine” might not work, and hence terraform decouples its commands from the predefined branch mechanism.</p>\n<p>Many other IAC platforms have similar flavored concepts of managing drift, including <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\">AWS Cloudformation</a>, <a href=\"https://cloudacademy.com/course/implementing-azure-infrastructure-compliance-and-security/preventing-drift/\">Microsoft Azure</a>, and so on.</p>\n<p>The idea of coupling drift to branches could be appealing for certain teams who do trunk-based development, but if you are not falling under this category, a more on-demand (API) driven approach might work for you much better.</p>\n<h2>Summary</h2>\n<p>In this article, we built the bare bones of a drift management engine. By using controls for both <code class=\"language-text\">remote</code> and <code class=\"language-text\">local</code> states, we were able to interchangeably compute desired states and add/remove resources. Something to highlight is how easy it was to achieve the <code class=\"language-text\">remote</code> computations by using <code class=\"language-text\">Upstash</code>. Obviously, we could contemplate using other databases within <code class=\"language-text\">AWS</code> (ie <code class=\"language-text\">DynamoDB</code>), having a RESTful API in under 30 seconds was very e.handy to get started.</p>\n<p>In the drift management space, there are certain players, like HashiCorp’s terraform solution, which are leading the space. Drift management mechanisms could be applied in other domains. The general concept of <code class=\"language-text\">remote</code> and <code class=\"language-text\">local</code> differentiation is very close to the ones of <a href=\"https://en.wikipedia.org/wiki/Cache_invalidation\">cache invalidation</a>, <a href=\"https://bazel.build/remote/caching\">remote caching</a> and others. I feel that the industry is just at the begging of realizing how powerful some of these concepts are, and one example is Vercel’s Turborepo implementation, my bet is that there will be a steady increase of vendors utilizing such solutions in the near future, which makes the space very exciting to be part of!</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.hashicorp.com/blog/detecting-and-managing-drift-with-terraform\">Terraform</a></li>\n<li><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\">AWS</a></li>\n<li><a href=\"https://azure.microsoft.com/en-ca/blog/what-why-how-azure-automation-desired-state-configuration/\">Azure</a></li>\n<li><a href=\"https://turborepo.org/\">Turborepo</a></li>\n<li><a href=\"https://gist.github.com/mkotsollaris/fb0a37193267f80a65a3b61bb04497ca\">gist example</a></li>\n</ul>","frontmatter":{"title":"Building a Drift Detection Engine with Upstash","date":"November 29, 2022","description":"Drift Engine Management Abstractions with Upstash and Typescript"}}},"pageContext":{"slug":"/upstash/","previous":{"fields":{"slug":"/documentation-google-swe-book/"},"frontmatter":{"title":"Documentation - \"Software Engineering at Google\" Chapter Review "}},"next":{"fields":{"slug":"/eslint-plugin-no-explicit-undefined/"},"frontmatter":{"title":"Embrace the Power of Implicit Undefined with the Optional Typescript Operator"}}}},"staticQueryHashes":["2418676009","63159454"]}